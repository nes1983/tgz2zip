#!/usr/bin/env bash

# Fail if return code isn't 0. 
# Parameter 1 is the return code
# Para. 2 is text to display on failure.
check_errs() {
  case "$1" in ([!0]*)
    echo "ERROR # $1 : $2"
    exit $1
  esac
}

normalize() {
    dir=$1
    dir=`dirname $dir`
    pushd $dir > /dev/null
    dir=`pwd`
    popd > /dev/null 2&>1
    fname=`basename $1`    
    echo "$dir/$fname"
}

#Show help and quit.
myhelp() {
    echo "USAGE: tgz2zip wonderland.tgz [middle-earth.tar.bzip2]" >&2
    exit 0
}

case "${1:--h}" in (-h)
    myhelp
;;(-?*)
    echo "Illegal option -- ${1#?}" >&2
    exit -1
;;esac

for infile in "$@"
do
    unpackdir="$(mktemp -d -t 2zip.XXXXXX)"
    trap "rm -rf '$unpackdir'" EXIT INT HUP TERM

    case "$infile" in
         (*.tgz)
            tar -C "$unpackdir" -xzf "$infile" >/dev/null
            check_errs $?
            outfile=${infile%.tgz}  
            ;;
        (*.tar.gz)
            tar -C "$unpackdir" -xzf "$infile" >/dev/null
            check_errs $?
            outfile=${infile%.tar.gz}
            ;;
        (*.tar)
            tar -C "$unpackdir" -xf "$infile" >/dev/null
            check_errs $?
            outfile=${infile%.tar}
            ;;
        (*.tar.bzip2)
            tar -C "$unpackdir" -xjf "$infile" >/dev/null 
            check_errs $?
            outfile=${infile%.tar.bzip2}
            ;;
        (*)
            echo "Unrecognized input format" >&2
            exit -1
            ;;
    esac
    outfile=`normalize $outfile`
    
    outfile="${outfile}.zip"

    if [ -e $outfile ] ; then
        echo "Overwriting $outfile" >&2
        rm "$outfile"
    fi
    
    pushd "$unpackdir" > /dev/null
    zip -r "$outfile" . > /dev/null
    check_errs $?
    popd > /dev/null
    rm $infile
    check_errs $?
    rm -rf "$unpackdir"
done
